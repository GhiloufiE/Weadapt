.info-widget-user{margin-bottom:2.5rem}.info-widget-user:last-child{margin-bottom:0}.info-widget-user>*:last-child{margin-bottom:0}.info-widget-user__avatar{margin-bottom:1rem;display:flex}.info-widget-user__avatar__link{border-radius:50%;height:6.125rem;flex:0 0 6.125rem}.info-widget-user__avatar img{width:100%;height:100%;border-radius:inherit;object-fit:cover}.info-widget-user__name{font-size:1.25rem;line-height:1.3;margin-bottom:0.5rem;color:var(--color--black-dark)}@media(min-width: 768px){.info-widget-user__name{font-size:1.5rem;line-height:1.3333333333}}.info-widget-user__name__link{font-weight:var(--font-weight-content-medium);transition:background-size var(--transition-speed) ease,color var(--transition-speed) ease;background-image:linear-gradient(currentColor, currentColor);background-repeat:no-repeat;background-position:100% 100%;background-size:0% 0.0625rem;color:currentColor}.info-widget-user__name__link:hover{background-size:100% 0.0625rem;background-position:0 100%}.info-widget-user__description{margin:1rem 0;font-size:0.875rem;line-height:1.4285714286}.info-widget-user__job{font-size:1rem;line-height:1.375;color:var(--color--black-dark);margin-bottom:1rem}@media(min-width: 768px){.info-widget-user__job{font-size:1.125rem;line-height:1.3333333333}}.info-widget-user__meta{list-style-type:none;padding:0;margin:1rem 0 1.5rem 0;display:flex;flex-wrap:wrap;gap:0.75rem 1.5rem;font-size:0.875rem;line-height:1.4285714286}.info-widget-user__meta__item{display:flex;align-items:center;gap:0.5rem}.info-widget-user__meta__item .icon{display:flex}.info-widget-user__actions{display:flex;flex-wrap:wrap;gap:1rem;margin-top:1.5rem}@media(min-width: 768px){.info-widget-user__actions{gap:1.5rem;margin-top:2rem}}.info-widget-user__actions .wp-block-button__link{justify-content:center}@media(min-width: 768px){.info-widget-user__actions .wp-block-button__link{min-width:6.25rem}}.info-widget-user{margin-bottom:2.5rem}.info-widget-user:last-child{margin-bottom:0}.info-widget-user>*:last-child{margin-bottom:0}.info-widget-user__avatar__link{border-radius:0.625rem;height:6.125rem;flex:0 0 6.125rem;box-shadow:0px 4px 24px 0px rgba(0,0,0,.25)}.theme--dark .info-widget-user__avatar__link{box-shadow:0px 4px 24px 0px rgba(255,255,255,.25)}.info-widget-user__avatar img{width:100%;height:100%;border-radius:0.625rem;object-fit:cover}.info-widget-user__user{margin-left:1.5rem}.info-widget-user__name{font-size:1.25rem;line-height:1.3;margin-bottom:0.5rem;color:var(--color--primary)}@media(min-width: 768px){.info-widget-user__name{font-size:1.5rem;line-height:1.3333333333}}.info-widget-user__name__link{font-weight:var(--font-weight-content-medium);transition:background-size var(--transition-speed) ease,color var(--transition-speed) ease;background-image:linear-gradient(currentColor, currentColor);background-repeat:no-repeat;background-position:100% 100%;background-size:0% 0.0625rem;color:currentColor}.info-widget-user__name__link:hover{background-size:100% 0.0625rem;background-position:0 100%}.info-widget-user__description{margin:1rem 0;font-size:0.875rem;line-height:1.4285714286}.info-widget-user__job{font-size:1rem;line-height:1.375;color:var(--color--black-dark);margin-bottom:1rem}@media(min-width: 768px){.info-widget-user__job{font-size:1rem;line-height:1.5}}.info-widget-user__meta{list-style-type:none;padding:0;margin:1rem 0 1.5rem 0;display:flex;flex-wrap:wrap;gap:0.75rem 1.5rem;font-size:0.875rem;line-height:1.4285714286}.info-widget-user__meta__item{display:flex;align-items:center;gap:0.5rem}.info-widget-user__meta__item .icon{display:flex}.info-widget-user__actions{display:flex;flex-wrap:wrap;gap:1rem;margin-top:1rem}@media(min-width: 768px){.info-widget-user__actions{gap:1.5rem}}.info-widget-user__actions .wp-block-button__link{justify-content:center}@media(min-width: 768px){.info-widget-user__actions .wp-block-button__link{min-width:6.25rem}}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
